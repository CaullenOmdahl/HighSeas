{"version":3,"file":"8.ByPwe6lh.js","sources":["../../../../../../src/routes/tv-shows/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport MovieRow from '$lib/components/MovieRow.svelte';\n\timport { stremioService } from '$lib/services/stremio';\n\timport type { StremioMetaPreview } from '$lib/services/stremio';\n\n\tlet series: StremioMetaPreview[] = [];\n\tlet loading = true;\n\tlet selectedGenre = 'all';\n\tlet selectedSort = 'popular';\n\n\tconst genres = ['all', 'action', 'comedy', 'drama', 'horror', 'sci-fi', 'thriller', 'romance'];\n\tconst sortOptions = [\n\t\t{ value: 'popular', label: 'Most Popular' },\n\t\t{ value: 'rating', label: 'Highest Rated' },\n\t\t{ value: 'year', label: 'Newest' }\n\t];\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tawait stremioService.initialize();\n\t\t\tawait loadSeries();\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load TV shows:', error);\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t});\n\n\tasync function loadSeries() {\n\t\ttry {\n\t\t\tconst [topSeries, newSeries, ratedSeries] = await Promise.allSettled([\n\t\t\t\tstremioService.getCatalog('series', 'top'),\n\t\t\t\tstremioService.getCatalog('series', 'year'),\n\t\t\t\tstremioService.getCatalog('series', 'imdbRating')\n\t\t\t]);\n\n\t\t\tconst allSeries = new Map();\n\t\t\t[topSeries, newSeries, ratedSeries].forEach((result) => {\n\t\t\t\tif (result.status === 'fulfilled') {\n\t\t\t\t\tresult.value.forEach((show) => allSeries.set(show.id, show));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tseries = Array.from(allSeries.values());\n\t\t\tconsole.log(`Loaded ${series.length} TV shows`);\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load TV shows from Stremio addons:', error);\n\t\t}\n\t}\n\n\t$: filteredSeries = series.filter((show) => {\n\t\tif (selectedGenre === 'all') return true;\n\t\treturn show.genre?.some((g) => g.toLowerCase().includes(selectedGenre));\n\t});\n\n\t$: sortedSeries = [...filteredSeries].sort((a, b) => {\n\t\tswitch (selectedSort) {\n\t\t\tcase 'rating':\n\t\t\t\treturn parseFloat(b.imdbRating || '0') - parseFloat(a.imdbRating || '0');\n\t\t\tcase 'year':\n\t\t\t\treturn parseInt(b.year || '0') - parseInt(a.year || '0');\n\t\t\tdefault: // popular\n\t\t\t\treturn 0;\n\t\t}\n\t});\n</script>\n\n<svelte:head>\n\t<title>TV Shows - HighSeas</title>\n</svelte:head>\n\n<div class=\"min-h-screen bg-black pt-24\">\n\t{#if loading}\n\t\t<div class=\"flex min-h-screen items-center justify-center\">\n\t\t\t<div class=\"text-xl text-white\">Loading TV shows...</div>\n\t\t</div>\n\t{:else}\n\t\t<div class=\"px-12\">\n\t\t\t<h1 class=\"mb-8 text-4xl font-black text-white\">TV Shows</h1>\n\n\t\t\t<!-- Filters -->\n\t\t\t<div class=\"mb-12 flex items-center space-x-8\">\n\t\t\t\t<!-- Genre Filter -->\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"tv-genre-select\" class=\"mb-2 block text-sm font-medium text-gray-400\"\n\t\t\t\t\t\t>Genre</label\n\t\t\t\t\t>\n\t\t\t\t\t<select\n\t\t\t\t\t\tid=\"tv-genre-select\"\n\t\t\t\t\t\tbind:value={selectedGenre}\n\t\t\t\t\t\tclass=\"rounded border border-gray-700 bg-gray-800 px-4 py-2 text-white\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{#each genres as genre}\n\t\t\t\t\t\t\t<option value={genre}\n\t\t\t\t\t\t\t\t>{genre === 'all'\n\t\t\t\t\t\t\t\t\t? 'All Genres'\n\t\t\t\t\t\t\t\t\t: genre.charAt(0).toUpperCase() + genre.slice(1)}</option\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- Sort Filter -->\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"tv-sort-select\" class=\"mb-2 block text-sm font-medium text-gray-400\"\n\t\t\t\t\t\t>Sort By</label\n\t\t\t\t\t>\n\t\t\t\t\t<select\n\t\t\t\t\t\tid=\"tv-sort-select\"\n\t\t\t\t\t\tbind:value={selectedSort}\n\t\t\t\t\t\tclass=\"rounded border border-gray-700 bg-gray-800 px-4 py-2 text-white\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{#each sortOptions as option}\n\t\t\t\t\t\t\t<option value={option.value}>{option.label}</option>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"text-sm text-gray-400\">\n\t\t\t\t\t{sortedSeries.length} shows found\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Content Rows -->\n\t\t\t{#if sortedSeries.length > 0}\n\t\t\t\t<div class=\"space-y-8\">\n\t\t\t\t\t<MovieRow title=\"New Episodes\" items={sortedSeries.slice(0, 10)} />\n\t\t\t\t\t<MovieRow title=\"Trending Shows\" items={sortedSeries.slice(10, 20)} />\n\t\t\t\t\t<MovieRow title=\"Top Rated Series\" items={sortedSeries.slice(20, 30)} />\n\t\t\t\t\t{#if sortedSeries.length > 30}\n\t\t\t\t\t\t<MovieRow title=\"More TV Shows\" items={sortedSeries.slice(30, 40)} />\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<div class=\"py-12 text-center\">\n\t\t\t\t\t<h2 class=\"mb-4 text-2xl font-bold text-white\">No TV Shows Found</h2>\n\t\t\t\t\t<p class=\"text-gray-400\">Try adjusting your filters or check back later.</p>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n</div>\n"],"names":["series","$.mutable_source","loading","selectedGenre","selectedSort","genres","sortOptions","onMount","$.track_reactivity_loss","stremioService","loadSeries","$.set","topSeries","newSeries","ratedSeries","allSeries","result","$.strict_equals","show","filteredSeries","g","sortedSeries","$.get","a","b","$.each","select","genre","$.untrack","select_1","option","$.bind_select_value","$$value","$$render","consequent","alternate_1"],"mappings":"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"}